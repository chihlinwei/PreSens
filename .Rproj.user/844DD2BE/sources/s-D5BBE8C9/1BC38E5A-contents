---
title: "PreSens data conversion"
author: "Chih-Lin Wei"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```
# Filtering out unwanted data
```{r}
library(dplyr)
library(plyr)
library(doBy)

# Function to get last observation of each time series measurements
keepLast <- function(...){
  f <- dir(pattern=".csv",...)
  out <-NULL
  for(j in 1:length(f)){
    d <- read.csv(f[j], skip=1, sep=";", nrows=0) %>% subset(!is.na(Value))
    m <- c(d$delta_t[-1], d$delta_t[length(d$delta_t)])-d$delta_t # Time difference between measurement
    k <- which(m>60) # Time series at least 1 hours apart
    k <- c(k, length(m)+1)
    s <- rep(1, k[1]-1) # Label each continuous time series
    if(length(k)>1){
    for(i in 2:length(k)){
      o <- rep(i, k[i]-k[i-1])
      s <- c(s, o)
      }
    d$Measurement <- factor(s)  
    } else d$Measurement <- factor(s)
    
    # Extract the last measurement of each continuous time series
    d <- cbind(Sample=gsub(".csv", "", f[j]), 
               splitBy(~Measurement, data=d) %>% lapply(FUN=function(x)x[dim(x)[1],]) %>% ldply(.id = "Measurement")
               )
    out <- rbind(out, d)
  }
  return(out)
  }
```

# All data points
```{r}
library(ggplot2)
dat <- keepLast()
ggplot(data=dat, aes(x=delta_t, y=Value))+
  geom_point()+
  facet_wrap(~Sample, scales="free")+
  theme_bw()
```

# Dianostic plots
```{r, fig.width=8, fig.height=8}
# Remove first few bad measurements
#bad1 <- with(dat, Sample=="LGD-T28-FWCR-Dive2-A"&delta_t<500&Value<180)
#bad2 <- with(dat, Sample=="LGD-T28-FWCR-Dive2-B"&Value<50)
#bad3 <- with(dat, delta_t<3)
#dat <- subset(dat, !(bad1|bad2|bad3))

# Initial measurement
ini <- splitBy(~Sample, dat) %>% lapply(FUN=function(x)x[1,]) %>% ldply(.id="Sample")

# Red dashline = 85% of the initial DO value
ggplot(data=dat, aes(x=delta_t, y=Value))+
  geom_point()+
  stat_smooth(method="lm", formula=y~x, se=F)+
  geom_hline(data=ini, aes(yintercept=Value*0.85), linetype=2, colour="red")+
  facet_wrap(~Sample, scales="free")+
  labs(y=expression(Dissolved~Oxygen~(mu*mol~L^-1)), x="Time (minutes)")+
  theme_bw()
```


